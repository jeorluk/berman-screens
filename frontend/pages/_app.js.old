import App, { Container } from 'next/app'
import { ApolloProvider } from '@apollo/react-hooks'
// import withData from '../lib/withData'
import Page from '../components/Page.js'
import { ApolloClient } from 'apollo-client'
import { createHttpLink } from 'apollo-link-http'
import { InMemoryCache } from 'apollo-cache-inmemory'
import { endpoint, prodEndpoint } from '../config'
import fetch from 'node-fetch'
import { ContextProvider } from '../globalState/state'

const client = new ApolloClient({
  ssrMode: true,
  // Remember that this is the interface the SSR server will use to connect to the
  // API server, so we need to ensure it isn't firewalled, etc
  link: createHttpLink({
    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,
    credentials: 'include',
    fetch: fetch,
    headers: {},
    // : {
    //   cookie: req.header('Cookie'),
    // },
  }),
  cache: new InMemoryCache(),

  /********
   * 
   * 
   * uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,
    request: operation => {
      operation.setContext({
        fetchOptions: {
          credentials: 'include',
        },
        headers,
   */
})

class MyApp extends App {
  static async getInitialProps({ Component, ctx }) {
    let pageProps = {}
    if (Component.getInitialProps) {
      pageProps = await Component.getInitialProps(ctx)
    }
    //this exposes the query to the user
    pageProps.query = ctx.query
    return { pageProps }
  }
  render() {
    const { Component, apollo, pageProps } = this.props

    return (
      <Container>
        <ApolloProvider client={client}>
          {/* <ContextProvider> */}
          <Page>
            <Component {...pageProps} />
          </Page>
          {/* </ContextProvider> */}
        </ApolloProvider>
      </Container>
    )
  }
}

// export default withData(MyApp)
export default MyApp
