import React, { useContext, useState, useEffect } from 'react'
import ContentEditable from 'react-contenteditable'
import sanitizeHtml from 'sanitize-html'
import { Draggable } from 'react-beautiful-dnd'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import styled, { ThemeContext } from 'styled-components'
import { Button, Card } from './Styles'

const EditorStyles = styled.div`
  position: relative;
  width: 100%;
  /* text-align: center; */

  .editable {
    max-width: 100%;
    overflow: auto;
    padding: 0 10px;

    background-color: white;
    color: ${props => props.theme.primary};
    text-align: center;
    font-family: 'montserrat';
    font-size: 6rem;
    line-height: 1.25;
    margin: 2px;
    border: 0;
    outline: 0;
    border: 1px solid grey;

    &:hover {
      margin-bottom: 1px;
      border: 2px solid black;
    }

    &:focus {
      /* margin: 0; */
      border: 2px solid ${props => props.theme.primaryLight};
    }
  }

  .editButton {
    margin: 2px;
    background: ${props => props.theme.primaryLight};
  }

  .deleteButton {
    position: absolute;
    top: 0;
    right: 0;
  }
`

const Handle = styled.div`
  margin: auto 0.25em;
  font-size: 3rem;
  color: ${props => props.theme.primary};

  &:hover {
    cursor: grab;
  }
`
const ParnasEditor = ({ id, parnasMessage, dataIndex }) => {
  const themeContext = useContext(ThemeContext)
  const [message, setMessage] = useState('The message')

  useEffect(() => {
    setMessage(parnasMessage)
  }, [])

  const sanitizeConf = {
    allowedTags: ['div', 'b', 'p', 'br', 'font', 'span'],
    allowedAttributes: { '*': ['style', 'color'] },
    allowedStyles: {
      '*': {
        'text-align': [/^left$/, /^right$/, /^center$/],
        'font-weight': [/^normal$/],
      },
    },
  }

  const sanitize = () => {
    setMessage(prevState => {
      console.log(prevState)
      return sanitizeHtml(prevState, sanitizeConf)
    })
    console.log(message)
  }

  const EditButton = props => {
    return (
      <Button
        className="editButton"
        key={props.cmd}
        onMouseDown={evt => {
          evt.preventDefault() // Avoids loosing focus from the editable area
          document.execCommand(props.cmd, false, props.arg) // Send the command to the browser
        }}
      >
        <FontAwesomeIcon icon={props.name} color={props.arg || 'white'} />
      </Button>
    )
  }

  if (!message) {
    return <Card>No message to edit</Card>
  }
  console.log(message)
  return (
    // <Draggable draggableId={id} index={dataIndex}>
    //   {provided => (
    <Card>
      <EditorStyles>
        <Button
          className="deleteButton"
          onClick={() => {
            if (confirm('You are about to delete.  Are you sure?')) {
              deleteScheduleFromDB()
            }
          }}
        >
          <FontAwesomeIcon icon="trash" />
        </Button>

        <div className="buttonRow">
          {/* <Handle {...provided.dragHandleProps}>:::</Handle> */}
          <EditButton name="bold" cmd="bold" />
          <EditButton name="align-center" cmd="justifyCenter" />
          <EditButton name="align-left" cmd="justifyLeft" />
          {/* <EditButton
                name="circle"
                cmd="foreColor"
                arg={themeContext.orange}
              />
              <EditButton
                name="circle"
                cmd="foreColor"
                arg={themeContext.primary}
              /> */}
        </div>

        <ContentEditable
          className="editable"
          //   html={editSchedule.periods} // innerHTML of the editable div
          html={message}
          tagName="pre"
          // disabled={!this.state.editable} // use true to disable edition
          onChange={e => {
            console.log(e.target.value)
            setMessage(e.target.value)
            //setEditSchedule({ ...editSchedule, periods: e.target.value })
            // setHtml(e.target.value)
            //setEditScheduleDirty(true)
          }} // handle innerHTML change
          onBlur={() => {
            sanitize()
          }}
        />
      </EditorStyles>
    </Card>
    //   )}
    // </Draggable>
  )
}
export default ParnasEditor
