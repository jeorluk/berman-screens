# source: https://us1.prisma.sh/jim-orluk/berman-screens/dev
# timestamp: Mon Oct 14 2019 14:55:56 GMT-0400 (Eastern Daylight Time)

type AggregateAnnouncement {
  count: Int!
}

type AggregateParnasMessage {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Announcement implements Node {
  id: ID!
  title: String!
  items: [String!]!
  user: User!
  isLinkToImage: Boolean!
  order: Int!
}

"""A connection to a list of items."""
type AnnouncementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnouncementEdge]!
  aggregate: AggregateAnnouncement!
}

input AnnouncementCreateInput {
  id: ID
  title: String!
  isLinkToImage: Boolean!
  order: Int!
  items: AnnouncementCreateitemsInput
  user: UserCreateOneWithoutAnnouncementsInput!
}

input AnnouncementCreateitemsInput {
  set: [String!]
}

input AnnouncementCreateManyWithoutUserInput {
  create: [AnnouncementCreateWithoutUserInput!]
  connect: [AnnouncementWhereUniqueInput!]
}

input AnnouncementCreateWithoutUserInput {
  id: ID
  title: String!
  isLinkToImage: Boolean!
  order: Int!
  items: AnnouncementCreateitemsInput
}

"""An edge in a connection."""
type AnnouncementEdge {
  """The item at the end of the edge."""
  node: Announcement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnnouncementOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  isLinkToImage_ASC
  isLinkToImage_DESC
  order_ASC
  order_DESC
}

type AnnouncementPreviousValues {
  id: ID!
  title: String!
  items: [String!]!
  isLinkToImage: Boolean!
  order: Int!
}

input AnnouncementScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnouncementScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnouncementScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnouncementScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  isLinkToImage: Boolean

  """All values that are not equal to given value."""
  isLinkToImage_not: Boolean
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
}

type AnnouncementSubscriptionPayload {
  mutation: MutationType!
  node: Announcement
  updatedFields: [String!]
  previousValues: AnnouncementPreviousValues
}

input AnnouncementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnouncementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnouncementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnouncementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnnouncementWhereInput
}

input AnnouncementUpdateInput {
  title: String
  isLinkToImage: Boolean
  order: Int
  items: AnnouncementUpdateitemsInput
  user: UserUpdateOneRequiredWithoutAnnouncementsInput
}

input AnnouncementUpdateitemsInput {
  set: [String!]
}

input AnnouncementUpdateManyDataInput {
  title: String
  isLinkToImage: Boolean
  order: Int
  items: AnnouncementUpdateitemsInput
}

input AnnouncementUpdateManyMutationInput {
  title: String
  isLinkToImage: Boolean
  order: Int
  items: AnnouncementUpdateitemsInput
}

input AnnouncementUpdateManyWithoutUserInput {
  create: [AnnouncementCreateWithoutUserInput!]
  connect: [AnnouncementWhereUniqueInput!]
  set: [AnnouncementWhereUniqueInput!]
  disconnect: [AnnouncementWhereUniqueInput!]
  delete: [AnnouncementWhereUniqueInput!]
  update: [AnnouncementUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AnnouncementUpdateManyWithWhereNestedInput!]
  deleteMany: [AnnouncementScalarWhereInput!]
  upsert: [AnnouncementUpsertWithWhereUniqueWithoutUserInput!]
}

input AnnouncementUpdateManyWithWhereNestedInput {
  where: AnnouncementScalarWhereInput!
  data: AnnouncementUpdateManyDataInput!
}

input AnnouncementUpdateWithoutUserDataInput {
  title: String
  isLinkToImage: Boolean
  order: Int
  items: AnnouncementUpdateitemsInput
}

input AnnouncementUpdateWithWhereUniqueWithoutUserInput {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateWithoutUserDataInput!
}

input AnnouncementUpsertWithWhereUniqueWithoutUserInput {
  where: AnnouncementWhereUniqueInput!
  update: AnnouncementUpdateWithoutUserDataInput!
  create: AnnouncementCreateWithoutUserInput!
}

input AnnouncementWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnouncementWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnouncementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnouncementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  isLinkToImage: Boolean

  """All values that are not equal to given value."""
  isLinkToImage_not: Boolean
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  user: UserWhereInput
}

input AnnouncementWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createAnnouncement(data: AnnouncementCreateInput!): Announcement!
  createParnasMessage(data: ParnasMessageCreateInput!): ParnasMessage!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAnnouncement(data: AnnouncementUpdateInput!, where: AnnouncementWhereUniqueInput!): Announcement
  updateParnasMessage(data: ParnasMessageUpdateInput!, where: ParnasMessageWhereUniqueInput!): ParnasMessage
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteParnasMessage(where: ParnasMessageWhereUniqueInput!): ParnasMessage
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAnnouncement(where: AnnouncementWhereUniqueInput!, create: AnnouncementCreateInput!, update: AnnouncementUpdateInput!): Announcement!
  upsertParnasMessage(where: ParnasMessageWhereUniqueInput!, create: ParnasMessageCreateInput!, update: ParnasMessageUpdateInput!): ParnasMessage!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyAnnouncements(data: AnnouncementUpdateManyMutationInput!, where: AnnouncementWhereInput): BatchPayload!
  updateManyParnasMessages(data: ParnasMessageUpdateManyMutationInput!, where: ParnasMessageWhereInput): BatchPayload!
  updateManySchedules(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAnnouncements(where: AnnouncementWhereInput): BatchPayload!
  deleteManyParnasMessages(where: ParnasMessageWhereInput): BatchPayload!
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type ParnasMessage implements Node {
  id: ID!
  message: String!
  order: Int!
}

"""A connection to a list of items."""
type ParnasMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ParnasMessageEdge]!
  aggregate: AggregateParnasMessage!
}

input ParnasMessageCreateInput {
  id: ID
  message: String!
  order: Int!
}

input ParnasMessageCreateManyInput {
  create: [ParnasMessageCreateInput!]
  connect: [ParnasMessageWhereUniqueInput!]
}

"""An edge in a connection."""
type ParnasMessageEdge {
  """The item at the end of the edge."""
  node: ParnasMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ParnasMessageOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  order_ASC
  order_DESC
}

type ParnasMessagePreviousValues {
  id: ID!
  message: String!
  order: Int!
}

input ParnasMessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ParnasMessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParnasMessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParnasMessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
}

type ParnasMessageSubscriptionPayload {
  mutation: MutationType!
  node: ParnasMessage
  updatedFields: [String!]
  previousValues: ParnasMessagePreviousValues
}

input ParnasMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ParnasMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParnasMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParnasMessageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ParnasMessageWhereInput
}

input ParnasMessageUpdateDataInput {
  message: String
  order: Int
}

input ParnasMessageUpdateInput {
  message: String
  order: Int
}

input ParnasMessageUpdateManyDataInput {
  message: String
  order: Int
}

input ParnasMessageUpdateManyInput {
  create: [ParnasMessageCreateInput!]
  connect: [ParnasMessageWhereUniqueInput!]
  set: [ParnasMessageWhereUniqueInput!]
  disconnect: [ParnasMessageWhereUniqueInput!]
  delete: [ParnasMessageWhereUniqueInput!]
  update: [ParnasMessageUpdateWithWhereUniqueNestedInput!]
  updateMany: [ParnasMessageUpdateManyWithWhereNestedInput!]
  deleteMany: [ParnasMessageScalarWhereInput!]
  upsert: [ParnasMessageUpsertWithWhereUniqueNestedInput!]
}

input ParnasMessageUpdateManyMutationInput {
  message: String
  order: Int
}

input ParnasMessageUpdateManyWithWhereNestedInput {
  where: ParnasMessageScalarWhereInput!
  data: ParnasMessageUpdateManyDataInput!
}

input ParnasMessageUpdateWithWhereUniqueNestedInput {
  where: ParnasMessageWhereUniqueInput!
  data: ParnasMessageUpdateDataInput!
}

input ParnasMessageUpsertWithWhereUniqueNestedInput {
  where: ParnasMessageWhereUniqueInput!
  update: ParnasMessageUpdateDataInput!
  create: ParnasMessageCreateInput!
}

input ParnasMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [ParnasMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParnasMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParnasMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
}

input ParnasMessageWhereUniqueInput {
  id: ID
}

enum Permission {
  USER
  ADMIN
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  announcements(where: AnnouncementWhereInput, orderBy: AnnouncementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Announcement]!
  parnasMessages(where: ParnasMessageWhereInput, orderBy: ParnasMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ParnasMessage]!
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  user(where: UserWhereUniqueInput!): User
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  parnasMessage(where: ParnasMessageWhereUniqueInput!): ParnasMessage
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  announcementsConnection(where: AnnouncementWhereInput, orderBy: AnnouncementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnnouncementConnection!
  parnasMessagesConnection(where: ParnasMessageWhereInput, orderBy: ParnasMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParnasMessageConnection!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Schedule implements Node {
  id: ID!
  name: String!
  periods: String!
  user: User!
}

"""A connection to a list of items."""
type ScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  id: ID
  name: String!
  periods: String!
  user: UserCreateOneWithoutSchedulesInput!
}

input ScheduleCreateManyWithoutUserInput {
  create: [ScheduleCreateWithoutUserInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateOneInput {
  create: ScheduleCreateInput
  connect: ScheduleWhereUniqueInput
}

input ScheduleCreateWithoutUserInput {
  id: ID
  name: String!
  periods: String!
}

"""An edge in a connection."""
type ScheduleEdge {
  """The item at the end of the edge."""
  node: Schedule!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  periods_ASC
  periods_DESC
}

type SchedulePreviousValues {
  id: ID!
  name: String!
  periods: String!
}

input ScheduleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  periods: String

  """All values that are not equal to given value."""
  periods_not: String

  """All values that are contained in given list."""
  periods_in: [String!]

  """All values that are not contained in given list."""
  periods_not_in: [String!]

  """All values less than the given value."""
  periods_lt: String

  """All values less than or equal the given value."""
  periods_lte: String

  """All values greater than the given value."""
  periods_gt: String

  """All values greater than or equal the given value."""
  periods_gte: String

  """All values containing the given string."""
  periods_contains: String

  """All values not containing the given string."""
  periods_not_contains: String

  """All values starting with the given string."""
  periods_starts_with: String

  """All values not starting with the given string."""
  periods_not_starts_with: String

  """All values ending with the given string."""
  periods_ends_with: String

  """All values not ending with the given string."""
  periods_not_ends_with: String
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
}

input ScheduleUpdateDataInput {
  name: String
  periods: String
  user: UserUpdateOneRequiredWithoutSchedulesInput
}

input ScheduleUpdateInput {
  name: String
  periods: String
  user: UserUpdateOneRequiredWithoutSchedulesInput
}

input ScheduleUpdateManyDataInput {
  name: String
  periods: String
}

input ScheduleUpdateManyMutationInput {
  name: String
  periods: String
}

input ScheduleUpdateManyWithoutUserInput {
  create: [ScheduleCreateWithoutUserInput!]
  connect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  delete: [ScheduleWhereUniqueInput!]
  update: [ScheduleUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
  deleteMany: [ScheduleScalarWhereInput!]
  upsert: [ScheduleUpsertWithWhereUniqueWithoutUserInput!]
}

input ScheduleUpdateManyWithWhereNestedInput {
  where: ScheduleScalarWhereInput!
  data: ScheduleUpdateManyDataInput!
}

input ScheduleUpdateOneInput {
  create: ScheduleCreateInput
  connect: ScheduleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ScheduleUpdateDataInput
  upsert: ScheduleUpsertNestedInput
}

input ScheduleUpdateWithoutUserDataInput {
  name: String
  periods: String
}

input ScheduleUpdateWithWhereUniqueWithoutUserInput {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateWithoutUserDataInput!
}

input ScheduleUpsertNestedInput {
  update: ScheduleUpdateDataInput!
  create: ScheduleCreateInput!
}

input ScheduleUpsertWithWhereUniqueWithoutUserInput {
  where: ScheduleWhereUniqueInput!
  update: ScheduleUpdateWithoutUserDataInput!
  create: ScheduleCreateWithoutUserInput!
}

input ScheduleWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  periods: String

  """All values that are not equal to given value."""
  periods_not: String

  """All values that are contained in given list."""
  periods_in: [String!]

  """All values that are not contained in given list."""
  periods_not_in: [String!]

  """All values less than the given value."""
  periods_lt: String

  """All values less than or equal the given value."""
  periods_lte: String

  """All values greater than the given value."""
  periods_gt: String

  """All values greater than or equal the given value."""
  periods_gte: String

  """All values containing the given string."""
  periods_contains: String

  """All values not containing the given string."""
  periods_not_contains: String

  """All values starting with the given string."""
  periods_starts_with: String

  """All values not starting with the given string."""
  periods_not_starts_with: String

  """All values ending with the given string."""
  periods_ends_with: String

  """All values not ending with the given string."""
  periods_not_ends_with: String
  user: UserWhereInput
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  announcement(where: AnnouncementSubscriptionWhereInput): AnnouncementSubscriptionPayload
  parnasMessage(where: ParnasMessageSubscriptionWhereInput): ParnasMessageSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  password: String!
  permissions: [Permission!]!
  announcements(where: AnnouncementWhereInput, orderBy: AnnouncementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Announcement!]
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule!]
  activeSchedule: Schedule
  editSchedule: Schedule
  parnasHayom(where: ParnasMessageWhereInput, orderBy: ParnasMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ParnasMessage!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  announcements: AnnouncementCreateManyWithoutUserInput
  schedules: ScheduleCreateManyWithoutUserInput
  activeSchedule: ScheduleCreateOneInput
  editSchedule: ScheduleCreateOneInput
  parnasHayom: ParnasMessageCreateManyInput
}

input UserCreateOneWithoutAnnouncementsInput {
  create: UserCreateWithoutAnnouncementsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSchedulesInput {
  create: UserCreateWithoutSchedulesInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutAnnouncementsInput {
  id: ID
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  schedules: ScheduleCreateManyWithoutUserInput
  activeSchedule: ScheduleCreateOneInput
  editSchedule: ScheduleCreateOneInput
  parnasHayom: ParnasMessageCreateManyInput
}

input UserCreateWithoutSchedulesInput {
  id: ID
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  announcements: AnnouncementCreateManyWithoutUserInput
  activeSchedule: ScheduleCreateOneInput
  editSchedule: ScheduleCreateOneInput
  parnasHayom: ParnasMessageCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
  announcements: AnnouncementUpdateManyWithoutUserInput
  schedules: ScheduleUpdateManyWithoutUserInput
  activeSchedule: ScheduleUpdateOneInput
  editSchedule: ScheduleUpdateOneInput
  parnasHayom: ParnasMessageUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutAnnouncementsInput {
  create: UserCreateWithoutAnnouncementsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAnnouncementsDataInput
  upsert: UserUpsertWithoutAnnouncementsInput
}

input UserUpdateOneRequiredWithoutSchedulesInput {
  create: UserCreateWithoutSchedulesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSchedulesDataInput
  upsert: UserUpsertWithoutSchedulesInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutAnnouncementsDataInput {
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
  schedules: ScheduleUpdateManyWithoutUserInput
  activeSchedule: ScheduleUpdateOneInput
  editSchedule: ScheduleUpdateOneInput
  parnasHayom: ParnasMessageUpdateManyInput
}

input UserUpdateWithoutSchedulesDataInput {
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
  announcements: AnnouncementUpdateManyWithoutUserInput
  activeSchedule: ScheduleUpdateOneInput
  editSchedule: ScheduleUpdateOneInput
  parnasHayom: ParnasMessageUpdateManyInput
}

input UserUpsertWithoutAnnouncementsInput {
  update: UserUpdateWithoutAnnouncementsDataInput!
  create: UserCreateWithoutAnnouncementsInput!
}

input UserUpsertWithoutSchedulesInput {
  update: UserUpdateWithoutSchedulesDataInput!
  create: UserCreateWithoutSchedulesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  announcements_every: AnnouncementWhereInput
  announcements_some: AnnouncementWhereInput
  announcements_none: AnnouncementWhereInput
  schedules_every: ScheduleWhereInput
  schedules_some: ScheduleWhereInput
  schedules_none: ScheduleWhereInput
  activeSchedule: ScheduleWhereInput
  editSchedule: ScheduleWhereInput
  parnasHayom_every: ParnasMessageWhereInput
  parnasHayom_some: ParnasMessageWhereInput
  parnasHayom_none: ParnasMessageWhereInput
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
